package ru.yandex.practicum.filmorate;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.exceprions.UserNotFoundException;
import ru.yandex.practicum.filmorate.model.User;
import ru.yandex.practicum.filmorate.service.database.DbUserService;
import ru.yandex.practicum.filmorate.storage.database.UserDbStorage;

import java.util.List;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class UserDbServiceTest {

    UserDbStorage userDbStorage;
    DbUserService userService;
    JdbcTemplate jdbcTemplate;
    ResourceSupplier rs;

    @BeforeEach
    public void insertUser() {
        userDbStorage.create(rs.getFirstUser());
        userDbStorage.create(rs.getSecondUser());
    }

    @AfterEach
    public void rebootTables() {
        String dropUserTable = "DROP TABLE users_storage CASCADE";
        jdbcTemplate.update(dropUserTable);
        String newUserTable = "CREATE TABLE IF NOT EXISTS users_storage (" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "email varchar(50) NOT NULL, " +
                "name varchar(50) NOT NULL, " +
                "login varchar(50) NOT NULL, " +
                "birthday DATE NOT NULL)";
        jdbcTemplate.update(newUserTable);
    }

    @Test
    public void addFriendTest() {
        User user = userService.addFriend(1, 2);
        assertThat(user).isNotNull();
        assertThat(user.getFriends()).isNotEmpty();
        assertThat(user.getFriends().size()).isEqualTo(1);
        assertThat(user.getFriends().contains(2)).isTrue();
    }

    @Test
    public void removeFriendTest() {
        userService.addFriend(1, 2);
        User user = userService.removeFriend(1,2);
        assertThat(user).isNotNull();
        assertThat(user.getFriends()).isNull();
    }

    @Test
    public void getFriendsTest() {
        userService.addFriend(1, 2);
        Set<User> friends = userService.getFriends(1);
        assertThat(friends).isNotNull();
        assertThat(friends.size()).isEqualTo(1);
        assertThat(friends.toArray()[0]).isNotNull()
                .hasFieldOrPropertyWithValue("email", rs.getSecondUser().getEmail())
                .hasFieldOrPropertyWithValue("name", rs.getSecondUser().getName())
                .hasFieldOrPropertyWithValue("login", rs.getSecondUser().getLogin())
                .hasFieldOrPropertyWithValue("id", 2);
    }

    @Test
    public void getMutualFriendsTest() {
        userDbStorage.create(rs.getThirdUser());
        userService.addFriend(1, 2);
        userService.addFriend(3, 2);
        List<User> mutualFriends = userService.getMutualFriends(1,3);
        assertThat(mutualFriends).isNotNull();
        assertThat(mutualFriends.size()).isEqualTo(1);
        assertThat(mutualFriends.get(0)).isNotNull()
                .hasFieldOrPropertyWithValue("email", rs.getSecondUser().getEmail())
                .hasFieldOrPropertyWithValue("name", rs.getSecondUser().getName())
                .hasFieldOrPropertyWithValue("login", rs.getSecondUser().getLogin())
                .hasFieldOrPropertyWithValue("id", 2);
    }

    @Test
    public void addIncorrectUserIdTest() {
        assertThatThrownBy(() -> userService.addFriend(1000,1))
                .isInstanceOf(UserNotFoundException.class);
    }

    @Test
    public void removeIncorrectUserIdTest() {
        assertThatThrownBy(() -> userService.removeFriend(1000,1))
                .isInstanceOf(UserNotFoundException.class);
    }

    @Test
    public void mutualIncorrectUserIdTest() {
        assertThatThrownBy(() -> userService.getMutualFriends(1000,1))
                .isInstanceOf(UserNotFoundException.class);
    }
}
