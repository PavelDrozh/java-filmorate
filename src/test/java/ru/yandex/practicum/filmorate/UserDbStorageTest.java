package ru.yandex.practicum.filmorate;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import ru.yandex.practicum.filmorate.exceprions.UserNotFoundException;
import ru.yandex.practicum.filmorate.model.User;
import ru.yandex.practicum.filmorate.storage.database.UserDbStorage;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@SpringBootTest
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class UserDbStorageTest {

     UserDbStorage userDbStorage;
     JdbcTemplate jdbcTemplate;
    ResourceSupplier rs;

    @AfterEach
    public void rebootTable() {
        String dropTable = "DROP TABLE users_storage CASCADE";
        jdbcTemplate.update(dropTable);
        String newTable = "CREATE TABLE IF NOT EXISTS users_storage (" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                "email varchar(50) NOT NULL, " +
                "name varchar(50) NOT NULL, " +
                "login varchar(50) NOT NULL, " +
                "birthday DATE NOT NULL)";
        jdbcTemplate.update(newTable);
    }

    @Test
    public void createUserTest() {
        User created = userDbStorage.create(rs.getFirstUser());
        assertThat(created).hasFieldOrPropertyWithValue("id", 1);
    }

    @Test
    public void createUserIfNotExistTest() {
        User created = userDbStorage.updateOrCreate(rs.getFirstUser());
        assertThat(created).hasFieldOrPropertyWithValue("id", 1);
    }

    @Test
    public void updateUserTest() {
        User user = rs.getFirstUser();
        userDbStorage.create(user);

        user.setId(1);
        user.setName("updatedName");
        user.setLogin("updatedLogin");
        user.setEmail("updatedmail@mail.ru");

        userDbStorage.updateOrCreate(user);
        assertThat(userDbStorage.getById(user.getId()))
                .hasFieldOrPropertyWithValue("login", "updatedLogin")
                .hasFieldOrPropertyWithValue("name", "updatedName")
                .hasFieldOrPropertyWithValue("email", "updatedmail@mail.ru");
        User FROMDb = userDbStorage.getById(1);
        assertThat(FROMDb).hasFieldOrPropertyWithValue("id", 1);
    }

    @Test
    public void updateUserWithIncorrectIdTest() {
        User user = rs.getFirstUser();
        user.setId(1000);
        assertThatThrownBy(() -> userDbStorage.updateOrCreate(user))
                .isInstanceOf(UserNotFoundException.class);
    }

    @Test
    public void findUserByIdTest() {
        userDbStorage.create(rs.getFirstUser());
        User fromDb = userDbStorage.getById(1);
        assertThat(fromDb).hasFieldOrPropertyWithValue("id", 1);
    }

    @Test
    public void findAllUsersTest() {
        userDbStorage.create(rs.getFirstUser());
        userDbStorage.create(rs.getSecondUser());
        List<User> fromDb = userDbStorage.getAll();
        assertThat(fromDb.size()).isEqualTo(2);
        fromDb.forEach(user -> assertThat(user).isInstanceOf(User.class).isNotNull());
    }
}
